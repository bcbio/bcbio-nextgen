# Launch analysis environment on AWS with existing data volume.
# For bcbio analyses, volume expected to contain bcbio installation
# in /mnt/work/bcbio
# Makes it easy to stop/start analyses that fit on a single node and EBS volume.
---
- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - include_vars: project_vars.yaml
    - name: Launch EC2 instance
      register: ec2
      local_action:
        module: ec2
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        spot_price: "{{ spot_price }}"
        image: "{{ image_id }}"
        keypair: "{{ keypair }}"
        vpc_subnet_id: "{{ vpc_subnet }}"
        instance_profile_name: "{{ iam_role }}"
        region: "{{ region }}"
        zone: "{{ zone }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 30
            delete_on_termination: true
        assign_public_ip: yes
        count: 1
        wait: yes
        state: present
    - name: Attach working volume
      local_action: ec2_vol instance={{ item.id }} id={{ volume }} device_name=/dev/xvdf state=present region={{ region }}
      with_items: "{{ ec2.instances }}"
    - name: Add new instance to host group
      local_action:
        module: add_host
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
        # Get rid of SSH "Are you sure you want to continue connecting (yes/no)?" query
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
      with_items: "{{ ec2.instances }}"
    - name: Wait for SSH
      local_action: wait_for host={{ item.public_ip }} port=22 state=started
      with_items: "{{ ec2.instances }}"

- hosts: launched
  remote_user: ubuntu
  gather_facts: no
  pre_tasks:
    - raw: test -e /usr/bin/python || (sudo apt-get update && sudo apt-get update && sudo apt install -y python2.7-minimal python-simplejson)
    - action: setup
  tasks:
    - include_vars: project_vars.yaml
    - name: Check for nvme filesystem (m5+)
      stat:
        path: /dev/nvme1n1
      register: isnvme
    - name: Symlink for nvme filesystems (m5+)
      file:
        src: /dev/nvme1n1
        dest: /dev/xvdf
        state: link
      when: isnvme.stat.exists
      become: true
    - name: Create ext4 filesystem if not present
      filesystem: fstype=ext4 dev=/dev/xvdf
      become: true
    - name: Mount work volume
      become: true
      mount: name=/mnt/work src=/dev/xvdf fstype=ext4 state=mounted
    - name: Create bcbio directory if missing
      file: path=/mnt/work/bcbio state=directory owner=ubuntu
      become: true
    - name: Add bcbio to path
      lineinfile: line="export PATH=/mnt/work/bcbio/bin:$PATH" dest=~/.bashrc
    - apt: update_cache=yes
      become: true
    - apt: name="{{ item }}"
      become: true
      with_items: [git, unzip, wget, tar, gzip, bzip2]
      ignore_errors: true
    - name: Download docker
      get_url:
        url: https://get.docker.com
        dest: /tmp/docker-install.sh
    - name: Install docker
      become: true
      shell: bash /tmp/docker-install.sh
    - name: Add to docker group
      become: true
      shell: usermod -aG docker ubuntu
    - name: htcondor | Set up deb configuration for unattended install
      become: true
      shell: "{{ item }}"
      with_items:
        - echo "htcondor condor/wantdebconf boolean true" | debconf-set-selections
        - echo "htcondor condor/personal boolean true" | debconf-set-selections
    - name: htcondor | install
      become: true
      apt: name="htcondor"
    - name: htcondor | paritionable configuration
      become: true
      lineinfile:
        path: /etc/condor/condor_config.local
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^MAX_SLOTS_TYPE =', line: 'MAX_SLOTS_TYPE = 1' }
        - { regexp: '^SLOT_TYPE_1 =', line: 'SLOT_TYPE_1 = cpus=100%, ram=100%, disk=100%, swap=100%' }
        - { regexp: '^SLOT_TYPE_1_PARTITIONABLE =', line: 'SLOT_TYPE_1_PARTITIONABLE = True' }
        - { regexp: '^NUM_SLOTS_TYPE_1 =', line: 'NUM_SLOTS_TYPE_1 = 1' }
    - name: htcondor | Restart condor
      become: yes
      command: service condor restart
    - name: Install Microsoft key and register product repository
      become: true
      apt:
        deb: https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
    - name: Install apt-transport-https
      become: true
      apt:
        name: apt-transport-https
        state: latest
    - name: Install dotnet core
      become: true
      apt:
        name: dotnet-runtime-2.1
        state: latest
        update_cache: yes

# Optional launching of MySQL instance
# Requires `ansible-galaxy install geerlingguy.mysql`
# and configuration in project_vars.yaml
# https://github.com/geerlingguy/ansible-role-mysql
# - hosts: launched
#   remote_user: ubuntu
#   become: yes
#   vars_files:
#     - project_vars.yaml
#   roles:
#     - { role: geerlingguy.mysql }
